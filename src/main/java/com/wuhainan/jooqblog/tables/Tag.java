/*
 * This file is generated by jOOQ.
 */
package com.wuhainan.jooqblog.tables;


import com.wuhainan.jooqblog.Blog;
import com.wuhainan.jooqblog.Indexes;
import com.wuhainan.jooqblog.Keys;
import com.wuhainan.jooqblog.tables.records.TagRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tag extends TableImpl<TagRecord> {

    private static final long serialVersionUID = 1152926483;

    /**
     * The reference instance of <code>blog.tag</code>
     */
    public static final Tag TAG = new Tag();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TagRecord> getRecordType() {
        return TagRecord.class;
    }

    /**
     * The column <code>blog.tag.id</code>.
     */
    public final TableField<TagRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>blog.tag.create_time</code>.
     */
    public final TableField<TagRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.tag.creator_id</code>.
     */
    public final TableField<TagRecord, Integer> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.tag.delete_status</code>.
     */
    public final TableField<TagRecord, Integer> DELETE_STATUS = createField("delete_status", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.tag.delete_time</code>.
     */
    public final TableField<TagRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.tag.deleter_id</code>.
     */
    public final TableField<TagRecord, Integer> DELETER_ID = createField("deleter_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.tag.last_edit_time</code>.
     */
    public final TableField<TagRecord, Timestamp> LAST_EDIT_TIME = createField("last_edit_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.tag.last_editor_id</code>.
     */
    public final TableField<TagRecord, Integer> LAST_EDITOR_ID = createField("last_editor_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.tag.version</code>.
     */
    public final TableField<TagRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.tag.avatar</code>.
     */
    public final TableField<TagRecord, String> AVATAR = createField("avatar", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.tag.tag_name</code>.
     */
    public final TableField<TagRecord, String> TAG_NAME = createField("tag_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>blog.tag</code> table reference
     */
    public Tag() {
        this(DSL.name("tag"), null);
    }

    /**
     * Create an aliased <code>blog.tag</code> table reference
     */
    public Tag(String alias) {
        this(DSL.name(alias), TAG);
    }

    /**
     * Create an aliased <code>blog.tag</code> table reference
     */
    public Tag(Name alias) {
        this(alias, TAG);
    }

    private Tag(Name alias, Table<TagRecord> aliased) {
        this(alias, aliased, null);
    }

    private Tag(Name alias, Table<TagRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Tag(Table<O> child, ForeignKey<O, TagRecord> key) {
        super(child, key, TAG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blog.BLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TAG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TagRecord> getPrimaryKey() {
        return Keys.KEY_TAG_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TagRecord>> getKeys() {
        return Arrays.<UniqueKey<TagRecord>>asList(Keys.KEY_TAG_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tag as(String alias) {
        return new Tag(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Tag as(Name alias) {
        return new Tag(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(String name) {
        return new Tag(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tag rename(Name name) {
        return new Tag(name, null);
    }
}
