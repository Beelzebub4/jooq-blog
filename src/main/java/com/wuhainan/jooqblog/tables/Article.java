/*
 * This file is generated by jOOQ.
 */
package com.wuhainan.jooqblog.tables;


import com.wuhainan.jooqblog.Blog;
import com.wuhainan.jooqblog.Indexes;
import com.wuhainan.jooqblog.Keys;
import com.wuhainan.jooqblog.tables.records.ArticleRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Article extends TableImpl<ArticleRecord> {

    private static final long serialVersionUID = -672699084;

    /**
     * The reference instance of <code>blog.article</code>
     */
    public static final Article ARTICLE = new Article();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ArticleRecord> getRecordType() {
        return ArticleRecord.class;
    }

    /**
     * The column <code>blog.article.id</code>.
     */
    public final TableField<ArticleRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false), this, "");

    /**
     * The column <code>blog.article.create_time</code>.
     */
    public final TableField<ArticleRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.article.creator_id</code>.
     */
    public final TableField<ArticleRecord, String> CREATOR_ID = createField("creator_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.delete_status</code>.
     */
    public final TableField<ArticleRecord, Integer> DELETE_STATUS = createField("delete_status", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blog.article.delete_time</code>.
     */
    public final TableField<ArticleRecord, Timestamp> DELETE_TIME = createField("delete_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.article.deleter_id</code>.
     */
    public final TableField<ArticleRecord, String> DELETER_ID = createField("deleter_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.last_edit_time</code>.
     */
    public final TableField<ArticleRecord, Timestamp> LAST_EDIT_TIME = createField("last_edit_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>blog.article.last_editor_id</code>.
     */
    public final TableField<ArticleRecord, String> LAST_EDITOR_ID = createField("last_editor_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.version</code>.
     */
    public final TableField<ArticleRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>blog.article.category_id</code>.
     */
    public final TableField<ArticleRecord, String> CATEGORY_ID = createField("category_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.comment_id</code>.
     */
    public final TableField<ArticleRecord, String> COMMENT_ID = createField("comment_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.content</code>.
     */
    public final TableField<ArticleRecord, String> CONTENT = createField("content", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>blog.article.content_html</code>.
     */
    public final TableField<ArticleRecord, String> CONTENT_HTML = createField("content_html", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>blog.article.summary</code>.
     */
    public final TableField<ArticleRecord, String> SUMMARY = createField("summary", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.tag_id</code>.
     */
    public final TableField<ArticleRecord, String> TAG_ID = createField("tag_id", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.title</code>.
     */
    public final TableField<ArticleRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>blog.article.topping</code>.
     */
    public final TableField<ArticleRecord, Integer> TOPPING = createField("topping", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>blog.article.view_counts</code>.
     */
    public final TableField<ArticleRecord, Integer> VIEW_COUNTS = createField("view_counts", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>blog.article</code> table reference
     */
    public Article() {
        this(DSL.name("article"), null);
    }

    /**
     * Create an aliased <code>blog.article</code> table reference
     */
    public Article(String alias) {
        this(DSL.name(alias), ARTICLE);
    }

    /**
     * Create an aliased <code>blog.article</code> table reference
     */
    public Article(Name alias) {
        this(alias, ARTICLE);
    }

    private Article(Name alias, Table<ArticleRecord> aliased) {
        this(alias, aliased, null);
    }

    private Article(Name alias, Table<ArticleRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Article(Table<O> child, ForeignKey<O, ArticleRecord> key) {
        super(child, key, ARTICLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Blog.BLOG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ArticleRecord> getPrimaryKey() {
        return Keys.KEY_ARTICLE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ArticleRecord>> getKeys() {
        return Arrays.<UniqueKey<ArticleRecord>>asList(Keys.KEY_ARTICLE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(String alias) {
        return new Article(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Article as(Name alias) {
        return new Article(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(String name) {
        return new Article(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Article rename(Name name) {
        return new Article(name, null);
    }
}
